syntax = "proto3";

package parti.v1;

import "google/protobuf/any.proto";

// Clustering service provides methods for communication between nodes
service Clustering {
  // Ping method contacts a node based on partition ID
  rpc Ping (PingRequest) returns (PingResponse);
  // Stats returns node stats
  rpc Stats(StatsRequest) returns (StatsResponse);
  // Send forwards messages to nodes based on a partition ID
  rpc Send(SendRequest) returns (SendResponse);
  // StartPartition tells a node to start a specific partition
  rpc StartPartition(StartPartitionRequest) returns (StartPartitionResponse);
  // ShutdownPartition tells a node to shut down a specific partition in
  // preparation for a rebalance
  rpc ShutdownPartition(ShutdownPartitionRequest) returns (ShutdownPartitionResponse);
}

service Raft {
  // GetPeerDetails returns the node ID and discovery port
  rpc GetPeerDetails(GetPeerDetailsRequest) returns (GetPeerDetailsResponse);
  //  Bootstrap can be called to determine a peer's readiness to form a raft cluster
  rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse);
};

message BootstrapRequest {
  string from_peer_id = 1;
}

message BootstrapResponse {
  string peer_id = 1;
  bool in_cluster = 2;
}

message StartPartitionRequest {
  uint32 partition_id = 1;
}

message StartPartitionResponse {
  bool success = 1;
}

message ShutdownPartitionRequest {
  uint32 partition_id = 1;
}

message ShutdownPartitionResponse {
  bool success = 1;
}

message GetPeerDetailsRequest {}

message GetPeerDetailsResponse {
  string server_id = 1;
  uint32 discovery_port = 2;
  // bool is_in_cluster = 3;
}

message PingRequest {
  uint32 partition_id = 1;
  int32 hops = 2;
}

message PingResponse {
  string node_id = 1;
  uint32 partition_id = 2;
  int32 hops = 3;
}

message StatsRequest {

}

message StatsResponse {
  string node_id = 1;
  bool is_leader = 2;
  map<uint32, string> partition_owners = 3;
  map<string, uint32> peer_ports = 4;
}

message SendRequest {
  uint32 partition_id = 1;
  string message_id = 2;
  google.protobuf.Any message = 3;
}

message SendResponse {
  uint32 partition_id = 1;
  string message_id = 2;
  string node_id = 3;
  google.protobuf.Any response = 4;
  repeated string node_chain = 5;
}
